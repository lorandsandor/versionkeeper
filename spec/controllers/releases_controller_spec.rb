require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ReleasesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Release. As you add validations to Release, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { date: Date.today }
  }

  let(:invalid_attributes) {
    { date: nil }
  }

  let(:release) { Release.create! valid_attributes }

  let(:user) { create :user }

  before do
    sign_in user
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReleasesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all releases as @releases" do
      release = Release.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:releases)).to eq([release])
    end
  end

  describe "GET #show" do
    it "assigns the requested release as @release" do
      release = Release.create! valid_attributes
      get :show, params: { :id => release.to_param }, session: valid_session
      expect(assigns(:release)).to eq(release)
    end
  end

  describe "GET #new" do
    it "assigns a new release as @release" do
      get :new, params: {}, session: valid_session
      expect(assigns(:release)).to be_a_new(Release)
    end
  end

  describe "GET #edit" do
    it "assigns the requested release as @release" do
      release = Release.create! valid_attributes
      get :edit, params: { :id => release.to_param }, session: valid_session
      expect(assigns(:release)).to eq(release)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      specify do
        expect {
          post :create, params: { :release => valid_attributes }, session: valid_session
        }.to change(Release, :count).by(1)

        expect(assigns(:release)).to be_a(Release)
        expect(assigns(:release)).to be_persisted
        expect(response).to redirect_to(Release.last)
      end
    end

    context "with invalid params" do
      specify do
        post :create, params: { :release => invalid_attributes }, session: valid_session

        expect(assigns(:release)).to be_a_new(Release)
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do

    context "with valid params" do
      let(:new_attributes) {
        { date: Date.yesterday }
      }

      specify do
        put :update, params: { :id => release.to_param, :release => new_attributes }, session: valid_session
        release.reload

        expect(release.date).to eq new_attributes[:date]
        expect(assigns(:release)).to eq(release)
        expect(response).to redirect_to(release)
      end
    end

    context "with invalid params" do
      specify do
        put :update, params: { :id => release.to_param, :release => invalid_attributes }, session: valid_session
        expect(assigns(:release)).to eq(release)
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    specify do
      release.reload
      expect {
        delete :destroy, params: { :id => release.to_param }, session: valid_session
      }.to change(Release, :count).by(-1)

      expect(response).to redirect_to(releases_url)
    end
  end
end
